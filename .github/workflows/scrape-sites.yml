# RSS Feed Watcher - Automated Site Monitoring
# 
# This workflow monitors websites for changes and generates RSS feeds with diffs.
# It creates:
#   - Static HTML snapshots of each version (in content/)
#   - RSS feeds with markdown diffs between versions (in feeds/)
#   - Interactive history explorer for viewing changes over time
#
# HOW TO USE:
# 1. Copy this file to .github/workflows/scrape-sites.yml in your repository
# 2. Create a sites.toml file listing the sites you want to monitor
# 3. Push to GitHub - the workflow will run automatically every 4 hours
# 4. Access your feeds at: https://github.com/[your-username]/[your-repo]/blob/main/feeds/
# 5. View interactive history at: content/history-explorer.html

name: Monitor Sites and Update RSS Feeds

on:
  schedule:
    # Run every 4 hours (adjust as needed)
    # Format: minute hour day month day-of-week
    # Examples:
    #   '0 */4 * * *'  - Every 4 hours
    #   '0 */2 * * *'  - Every 2 hours
    #   '0 0 * * *'    - Once daily at midnight
    #   '*/30 * * * *' - Every 30 minutes
    - cron: '0 */4 * * *'
  
  # Allow manual triggering from GitHub Actions tab
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug output'
        required: false
        default: 'false'

jobs:
  monitor-sites:
    runs-on: ubuntu-latest
    
    # Grant permission to push changes back to the repository
    permissions:
      contents: write
    
    steps:
      # Step 1: Check out the repository
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for better git operations
      
      # Step 2: Set up Python environment
      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      # Step 3: Install watcher package
      - name: üì¶ Install watcher
        run: |
          pip install --upgrade pip
          # Install the watcher package from the main repository
          pip install git+https://github.com/gpwclark/watcher.git
          
          # If you're developing/forking, uncomment this instead:
          # uv pip install -e .
      
      # Step 4: Verify sites.toml exists
      - name: üìã Check configuration
        run: |
          if [ ! -f sites.toml ]; then
            echo "‚ùå Error: sites.toml not found!"
            echo ""
            echo "Please create a sites.toml file with your sites to monitor."
            echo "Example format:"
            echo ""
            cat << 'EOF'
          [[sites]]
          url = "https://example.com"
          feed_name = "example-site"
          min_hours = 1.0  # Optional: minimum hours between checks
          
          [[sites]]
          url = "https://jank-lang.org/progress/"
          feed_name = "jank-progress"
          EOF
            exit 1
          fi
          
          echo "‚úÖ Found sites.toml with the following configuration:"
          cat sites.toml
      
      # Step 5: Run the batch scraper
      - name: üîÑ Monitor sites and update feeds
        env:
          DEBUG: ${{ github.event.inputs.debug || 'false' }}
        run: |
          # Construct the base URL for links in RSS feeds
          # This makes links work correctly on GitHub
          BASE_URL="https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}"
          
          echo "üìä Starting site monitoring..."
          echo "Base URL: $BASE_URL"
          
          if [ "$DEBUG" = "true" ]; then
            echo "üîç Debug mode enabled"
            set -x
          fi
          
          # Run watcher-batch to process all sites in sites.toml
          watcher-batch --config sites.toml --base-url "$BASE_URL"
          
          echo "‚úÖ Site monitoring complete"
      
      # Step 6: Commit and push changes
      - name: üíæ Commit changes
        run: |
          # Configure git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions Bot"
          
          # Add generated files
          git add feeds/ content/ || true
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "üìù No changes detected - sites haven't changed"
          else
            # Count the changes
            CHANGED_FILES=$(git diff --staged --name-only | wc -l)
            echo "üìù Found changes in $CHANGED_FILES files"
            
            # Create a detailed commit message
            COMMIT_MSG="üîÑ Update feeds: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          
          Updated sites:
          $(git diff --staged --name-only | grep -E '^content/' | sed 's|content/||' | sed 's|/.*||' | sort -u | sed 's/^/- /')
          
          [Skip CI]"
            
            git commit -m "$COMMIT_MSG"
            git push
            
            echo "‚úÖ Changes pushed to repository"
          fi
      
      # Step 7: Generate summary
      - name: üìä Generate summary
        if: always()
        run: |
          echo "## üìä Monitoring Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d feeds ]; then
            echo "### üì° RSS Feeds" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            for feed in feeds/*.xml; do
              if [ -f "$feed" ]; then
                FEED_NAME=$(basename "$feed" .xml)
                echo "- [$FEED_NAME](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/$feed)" >> $GITHUB_STEP_SUMMARY
              fi
            done
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -d content ]; then
            echo "### üìÅ Content Snapshots" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            for dir in content/*/; do
              if [ -d "$dir" ]; then
                DIR_NAME=$(basename "$dir")
                FILE_COUNT=$(find "$dir" -name "*.html" | wc -l)
                echo "- **$DIR_NAME**: $FILE_COUNT versions" >> $GITHUB_STEP_SUMMARY
              fi
            done
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### üîó Useful Links" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [View History Explorer](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/content/history-explorer.html)" >> $GITHUB_STEP_SUMMARY
          echo "- [View All Feeds](https://github.com/${{ github.repository }}/tree/${{ github.ref_name }}/feeds)" >> $GITHUB_STEP_SUMMARY
          echo "- [View All Content](https://github.com/${{ github.repository }}/tree/${{ github.ref_name }}/content)" >> $GITHUB_STEP_SUMMARY

# TROUBLESHOOTING:
# 
# If the workflow fails:
# 1. Check that sites.toml exists and is valid TOML format
# 2. Verify the URLs in sites.toml are accessible
# 3. Check the Actions tab for detailed error messages
# 4. Ensure the repository has Actions enabled in Settings
#
# Common issues:
# - "Permission denied" - Check the workflow has 'contents: write' permission
# - "No module named watcher" - The package installation failed
# - "No changes" - The monitored sites haven't changed since last check