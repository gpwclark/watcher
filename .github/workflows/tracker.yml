name: Track Websites

on:
  schedule:
    - cron: '0 */6 * * *'  # Runs every 6 hours
  workflow_dispatch:  # Lets you run it manually
  push:
    branches: [ main ]
    paths: [ 'sites.toml' ]  # Re-runs when you update sites

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  track-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for better git operations

      - name: Checkout gh-pages branch (if exists) to preserve history
        continue-on-error: true
        run: |
          git fetch origin gh-pages:gh-pages || true
          if git show-ref --quiet refs/heads/gh-pages; then
            git worktree add gh-pages-content gh-pages
            # Copy existing content and feeds to preserve history
            if [ -d "gh-pages-content/content" ]; then
              cp -r gh-pages-content/content .
            fi
            if [ -d "gh-pages-content/feeds" ]; then
              cp -r gh-pages-content/feeds .
            fi
            git worktree remove gh-pages-content
          fi

      - name: Install Flox
        uses: flox/install-flox-action@v2

      #flox activate -- uv python install 3.13
      - name: Setup environment and install watcher
        run: |
          flox install uv
          flox activate -- uv pip install git+https://github.com/gpwclark/watcher.git

      - name: Run tracker
        run: |
          # Handle user/org pages vs project pages
          if [ "${{ github.event.repository.name }}" = "${{ github.repository_owner }}.github.io" ]; then
            BASE_URL="https://${{ github.repository_owner }}.github.io/"
          else
            BASE_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          fi
          flox activate -- uv run watcher-batch --config sites.toml --base-url "$BASE_URL"

      - name: Prepare files for GitHub Pages
        run: |
          mkdir -p deploy
          # Preserve directory structure for content and feeds
          cp -r content deploy/ 2>/dev/null || true
          cp -r feeds deploy/ 2>/dev/null || true

          # Also copy history explorer files to root for direct access
          if [ -f "content/history-explorer.html" ]; then
            cp content/history-explorer.html deploy/
            cp content/history-viewer.js deploy/
            cp content/viewer.html deploy/
          fi
          
          # Create a JSON index of feeds for the frontend
          if [ -d "feeds" ]; then
            echo "[" > deploy/feeds.json
            first=true
            for feed in feeds/*.xml; do
              if [ -f "$feed" ]; then
                if [ "$first" = true ]; then
                  first=false
                else
                  echo "," >> deploy/feeds.json
                fi
                basename "$feed" | sed 's/^/  "/' | sed 's/$/"/' >> deploy/feeds.json
              fi
            done
            echo "]" >> deploy/feeds.json
          else
            echo "[]" > deploy/feeds.json
          fi

          # Create file listings for each feed
          if [ -d "content" ]; then
            for feed_dir in content/*/; do
              if [ -d "$feed_dir" ]; then
                feed_name=$(basename "$feed_dir")
                echo "[" > "deploy/content/${feed_name}/files.json"
                first=true
                for file in "$feed_dir"*.html; do
                  if [ -f "$file" ]; then
                    if [ "$first" = true ]; then
                      first=false
                    else
                      echo "," >> "deploy/content/${feed_name}/files.json"
                    fi
                    basename "$file" | sed 's/^/  "/' | sed 's/$/"/' >> "deploy/content/${feed_name}/files.json"
                  fi
                done
                echo "]" >> "deploy/content/${feed_name}/files.json"
              fi
            done
          fi

          # Create a nice index page
          cat > deploy/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Website Change Tracker</title>
              <link rel="alternate" type="application/rss+xml" title="All Feeds" href="feeds/">
              <style>
                  * { margin: 0; padding: 0; box-sizing: border-box; }
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      line-height: 1.6;
                      color: #333;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      min-height: 100vh;
                  }
                  .container {
                      max-width: 900px;
                      margin: 0 auto;
                      padding: 40px 20px;
                  }
                  .header {
                      background: white;
                      border-radius: 12px;
                      padding: 30px;
                      margin-bottom: 30px;
                      box-shadow: 0 10px 30px rgba(0,0,0,0.1);
                  }
                  h1 {
                      color: #333;
                      margin-bottom: 10px;
                      font-size: 2.5em;
                  }
                  .subtitle {
                      color: #666;
                      font-size: 1.1em;
                  }
                  .feeds-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
                      gap: 20px;
                      margin-bottom: 30px;
                  }
                  .feed-card {
                      background: white;
                      border-radius: 8px;
                      padding: 20px;
                      box-shadow: 0 4px 15px rgba(0,0,0,0.08);
                      transition: transform 0.2s, box-shadow 0.2s;
                  }
                  .feed-card:hover {
                      transform: translateY(-5px);
                      box-shadow: 0 8px 25px rgba(0,0,0,0.15);
                  }
                  .feed-name {
                      font-weight: 600;
                      font-size: 1.2em;
                      margin-bottom: 10px;
                      color: #333;
                  }
                  .feed-links {
                      display: flex;
                      gap: 10px;
                      flex-wrap: wrap;
                  }
                  .feed-link {
                      display: inline-block;
                      padding: 6px 12px;
                      background: #f0f0f0;
                      color: #333;
                      text-decoration: none;
                      border-radius: 5px;
                      font-size: 0.9em;
                      transition: background 0.2s;
                  }
                  .feed-link:hover {
                      background: #667eea;
                      color: white;
                  }
                  .feed-link.rss {
                      background: #ff9500;
                      color: white;
                  }
                  .feed-link.rss:hover {
                      background: #e88600;
                  }
                  .explorer-banner {
                      background: white;
                      border-radius: 12px;
                      padding: 30px;
                      text-align: center;
                      box-shadow: 0 10px 30px rgba(0,0,0,0.1);
                  }
                  .explorer-button {
                      display: inline-block;
                      padding: 15px 30px;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white;
                      text-decoration: none;
                      border-radius: 8px;
                      font-size: 1.1em;
                      font-weight: 600;
                      margin-top: 15px;
                      transition: transform 0.2s;
                  }
                  .explorer-button:hover {
                      transform: scale(1.05);
                  }
                  .loading {
                      text-align: center;
                      padding: 40px;
                      color: white;
                  }
                  .last-updated {
                      text-align: center;
                      color: white;
                      margin-top: 20px;
                      font-size: 0.9em;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>📡 Website Change Tracker</h1>
                      <p class="subtitle">Monitoring websites for updates via RSS feeds</p>
                  </div>
          
                  <div id="feedsContainer" class="feeds-grid">
                      <div class="loading">Loading feeds...</div>
                  </div>
          
                  <div class="explorer-banner">
                      <h2>📜 Explore Change History</h2>
                      <p>View detailed diffs and navigate through the complete history of tracked websites</p>
                      <a href="history-explorer.html" class="explorer-button">Open History Explorer</a>
                  </div>

                  <div class="last-updated">
                      Last updated: <span id="lastUpdated"></span>
                  </div>
              </div>

              <script>
                  // Set last updated time
                  document.getElementById('lastUpdated').textContent = new Date().toLocaleString();

                  // Load feeds dynamically
                  async function loadFeeds() {
                      const container = document.getElementById('feedsContainer');

                      try {
                          // Fetch the feeds JSON index
                          const response = await fetch('feeds.json');
                          const feeds = await response.json();

                          if (feeds.length === 0) {
                              container.innerHTML = '<div class="loading">No feeds found yet. They will appear after the first run.</div>';
                              return;
                          }

                          container.innerHTML = feeds.map(filename => {
                              const feedName = filename.replace('.xml', '');
                              const displayName = feedName.replace(/-/g, ' ')
                                  .replace(/\b\w/g, l => l.toUpperCase());

                              return `
                                  <div class="feed-card">
                                      <div class="feed-name">${displayName}</div>
                                      <div class="feed-links">
                                          <a href="feeds/${filename}" class="feed-link rss">📡 RSS</a>
                                          <a href="history-explorer.html?feed=${feedName}" class="feed-link">📜 History</a>
                                          <a href="history-explorer.html?feed=${feedName}" class="feed-link">📁 Files</a>
                                      </div>
                                  </div>
                              `;
                          }).join('');

                      } catch (error) {
                          console.error('Error loading feeds:', error);
                          container.innerHTML = `
                              <div class="loading">
                                  <p>Feeds will appear here after the workflow runs.</p>
                                  <p style="margin-top: 10px; font-size: 0.9em;">
                                      If you just set this up, trigger the workflow manually or wait for the schedule.
                                  </p>
                              </div>
                          `;
                      }
                  }

                  loadFeeds();
              </script>
          </body>
          </html>
          EOF
          echo "=== Deploy directory structure ==="
          ls -la deploy/
          echo "=== Content directory ==="
          ls -la deploy/content/ 2>/dev/null || echo "No content directory"
          echo "=== Feeds directory ==="
          ls -la deploy/feeds/ 2>/dev/null || echo "No feeds directory"
          echo "=== Full recursive listing ==="
          find deploy -type f | head -20

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./deploy

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
