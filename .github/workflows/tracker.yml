name: Track Websites

on:
  schedule:
    - cron: '0 */6 * * *'  # Runs every 6 hours
  workflow_dispatch:  # Lets you run it manually
    inputs:
      subdirectory:
        description: 'Subdirectory to deploy to (e.g., "tracker" for /tracker/)'
        required: false
        default: ''
        type: string
  push:
    branches: [ main ]
    paths: [ 'sites.toml' ]  # Re-runs when you update sites

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  track-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    env:
      SUBDIR: ${{ github.event.inputs.subdirectory || '' }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for better git operations

      - name: Checkout gh-pages branch (if exists) to preserve history
        continue-on-error: true
        run: |
          echo "=== Checking for existing gh-pages branch ==="
          git fetch origin gh-pages:gh-pages || echo "No gh-pages branch found"
          
          if git show-ref --quiet refs/heads/gh-pages; then
            echo "Found gh-pages branch, preserving history..."
            git worktree add gh-pages-content gh-pages
            
            # Copy existing content and feeds to preserve history
            if [ -d "gh-pages-content/content" ]; then
              echo "Copying existing content..."
              cp -r gh-pages-content/content .
              echo "Content files copied: $(find content -name "*.html" | wc -l)"
            fi
            
            if [ -d "gh-pages-content/feeds" ]; then
              echo "Copying existing feeds..."
              cp -r gh-pages-content/feeds .
              echo "Feed files copied: $(find feeds -name "*.xml" | wc -l)"
            fi
            
            git worktree remove gh-pages-content
          else
            echo "No gh-pages branch found - this appears to be the first run"
          fi

      - name: Install Flox
        uses: flox/install-flox-action@v2

      #flox activate -- uv python install 3.13
      - name: Setup environment and install watcher
        run: |
          flox install uv
          flox activate -- uv pip install git+https://github.com/gpwclark/watcher.git

      - name: Run tracker
        run: |
          # Handle user/org pages vs project pages
          if [ "${{ github.event.repository.name }}" = "${{ github.repository_owner }}.github.io" ]; then
            BASE_URL="https://${{ github.repository_owner }}.github.io"
          else
            BASE_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          fi
          
          # Add subdirectory if specified
          if [ -n "$SUBDIR" ]; then
            BASE_URL="$BASE_URL/$SUBDIR"
          fi
          
          echo "Using base URL: $BASE_URL"
          flox activate -- uv run watcher-batch --config sites.toml --base-url "$BASE_URL"
          
          echo "=== After running watcher ==="
          echo "Content directories:"
          ls -la content/ 2>/dev/null || echo "No content directory"
          echo "Feed files:"
          ls -la feeds/ 2>/dev/null || echo "No feeds directory"
      - name: Commit to gh-pages branch
        run: |
          echo "=== Committing content to gh-pages branch ==="
          # Configure git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions"
          # Stash current changes
          git stash push -m "Stash main branch content" content feeds || true
          # Create or checkout gh-pages branch
          if git show-ref --quiet refs/remotes/origin/gh-pages; then
            echo "Checking out existing gh-pages branch..."
            git fetch origin gh-pages
            git checkout gh-pages
          else
            echo "Creating new gh-pages branch..."
            git checkout --orphan gh-pages
            git rm -rf . || true
          fi

          # Apply stashed content
          git stash pop || true
          # Add .nojekyll to prevent GitHub Pages from processing
          touch .nojekyll
          # Add and commit
          git add content feeds .nojekyll
          echo "Files to be committed:"
          git status --porcelain
          git commit -m "Update tracked content - $(date +'%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"

          # Push to gh-pages
          git push origin gh-pages

          echo "Total content files in gh-pages: $(find content -name "*.html" 2>/dev/null | wc -l)"
          echo "Total feed files in gh-pages: $(find feeds -name "*.xml" 2>/dev/null | wc -l)"

          # Switch back to main branch
          git checkout main

      - name: Prepare files for GitHub Pages
        run: |
          mkdir -p deploy
          
          # Create subdirectory if specified
          if [ -n "$SUBDIR" ]; then
            DEPLOY_PATH="deploy/$SUBDIR"
            mkdir -p "$DEPLOY_PATH"
          else
            DEPLOY_PATH="deploy"
          fi
          
          # Preserve directory structure for content and feeds
          cp -r content "$DEPLOY_PATH/" 2>/dev/null || true
          cp -r feeds "$DEPLOY_PATH/" 2>/dev/null || true

          # Also copy history explorer files to deployment root
          if [ -f "content/history-explorer.html" ]; then
            cp content/history-explorer.html "$DEPLOY_PATH/"
            cp content/history-viewer.js "$DEPLOY_PATH/"
            cp content/viewer.html "$DEPLOY_PATH/"
          fi

          # Create a JSON index of feeds for the frontend
          if [ -d "feeds" ]; then
            echo "[" > "$DEPLOY_PATH/feeds.json"
            first=true
            for feed in feeds/*.xml; do
              if [ -f "$feed" ]; then
                if [ "$first" = true ]; then
                  first=false
                else
                  echo "," >> "$DEPLOY_PATH/feeds.json"
                fi
                basename "$feed" | sed 's/^/  "/' | sed 's/$/"/' >> "$DEPLOY_PATH/feeds.json"
              fi
            done
            echo "]" >> "$DEPLOY_PATH/feeds.json"
          else
            echo "[]" > "$DEPLOY_PATH/feeds.json"
          fi

          # Create file listings for each feed
          if [ -d "content" ]; then
            for feed_dir in content/*/; do
              if [ -d "$feed_dir" ]; then
                feed_name=$(basename "$feed_dir")
                echo "[" > "$DEPLOY_PATH/content/${feed_name}/files.json"
                first=true
                for file in "$feed_dir"*.html; do
                  if [ -f "$file" ]; then
                    if [ "$first" = true ]; then
                      first=false
                    else
                      echo "," >> "$DEPLOY_PATH/content/${feed_name}/files.json"
                    fi
                    basename "$file" | sed 's/^/  "/' | sed 's/$/"/' >> "$DEPLOY_PATH/content/${feed_name}/files.json"
                  fi
                done
                echo "]" >> "$DEPLOY_PATH/content/${feed_name}/files.json"
              fi
            done
          fi

          # Create a nice index page
          cat > "$DEPLOY_PATH/index.html" << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Website Change Tracker</title>
              <link rel="alternate" type="application/rss+xml" title="All Feeds" href="feeds/">
              <style>
                  * { margin: 0; padding: 0; box-sizing: border-box; }
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      line-height: 1.6;
                      color: #333;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      min-height: 100vh;
                  }
                  .container {
                      max-width: 900px;
                      margin: 0 auto;
                      padding: 40px 20px;
                  }
                  .header {
                      background: white;
                      border-radius: 12px;
                      padding: 30px;
                      margin-bottom: 30px;
                      box-shadow: 0 10px 30px rgba(0,0,0,0.1);
                  }
                  h1 {
                      color: #333;
                      margin-bottom: 10px;
                      font-size: 2.5em;
                  }
                  .subtitle {
                      color: #666;
                      font-size: 1.1em;
                  }
                  .feeds-grid {
                      display: grid;
                      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
                      gap: 20px;
                      margin-bottom: 30px;
                  }
                  .feed-card {
                      background: white;
                      border-radius: 8px;
                      padding: 20px;
                      box-shadow: 0 4px 15px rgba(0,0,0,0.08);
                      transition: transform 0.2s, box-shadow 0.2s;
                  }
                  .feed-card:hover {
                      transform: translateY(-5px);
                      box-shadow: 0 8px 25px rgba(0,0,0,0.15);
                  }
                  .feed-name {
                      font-weight: 600;
                      font-size: 1.2em;
                      margin-bottom: 10px;
                      color: #333;
                  }
                  .feed-links {
                      display: flex;
                      gap: 10px;
                      flex-wrap: wrap;
                  }
                  .feed-link {
                      display: inline-block;
                      padding: 6px 12px;
                      background: #f0f0f0;
                      color: #333;
                      text-decoration: none;
                      border-radius: 5px;
                      font-size: 0.9em;
                      transition: background 0.2s;
                  }
                  .feed-link:hover {
                      background: #667eea;
                      color: white;
                  }
                  .feed-link.rss {
                      background: #ff9500;
                      color: white;
                  }
                  .feed-link.rss:hover {
                      background: #e88600;
                  }
                  .explorer-banner {
                      background: white;
                      border-radius: 12px;
                      padding: 30px;
                      text-align: center;
                      box-shadow: 0 10px 30px rgba(0,0,0,0.1);
                  }
                  .explorer-button {
                      display: inline-block;
                      padding: 15px 30px;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white;
                      text-decoration: none;
                      border-radius: 8px;
                      font-size: 1.1em;
                      font-weight: 600;
                      margin-top: 15px;
                      transition: transform 0.2s;
                  }
                  .explorer-button:hover {
                      transform: scale(1.05);
                  }
                  .loading {
                      text-align: center;
                      padding: 40px;
                      color: white;
                  }
                  .last-updated {
                      text-align: center;
                      color: white;
                      margin-top: 20px;
                      font-size: 0.9em;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>📡 Website Change Tracker</h1>
                      <p class="subtitle">Monitoring websites for updates via RSS feeds</p>
                  </div>
          
                  <div id="feedsContainer" class="feeds-grid">
                      <div class="loading">Loading feeds...</div>
                  </div>
          
                  <div class="explorer-banner">
                      <h2>📜 Explore Change History</h2>
                      <p>View detailed diffs and navigate through the complete history of tracked websites</p>
                      <a href="history-explorer.html" class="explorer-button">Open History Explorer</a>
                  </div>

                  <div class="last-updated">
                      Last updated: <span id="lastUpdated"></span>
                  </div>
              </div>

              <script>
                  // Set last updated time
                  document.getElementById('lastUpdated').textContent = new Date().toLocaleString();

                  // Load feeds dynamically
                  async function loadFeeds() {
                      const container = document.getElementById('feedsContainer');

                      try {
                          // Fetch the feeds JSON index
                          const response = await fetch('feeds.json');
                          const feeds = await response.json();

                          if (feeds.length === 0) {
                              container.innerHTML = '<div class="loading">No feeds found yet. They will appear after the first run.</div>';
                              return;
                          }

                          container.innerHTML = feeds.map(filename => {
                              const feedName = filename.replace('.xml', '');
                              const displayName = feedName.replace(/-/g, ' ')
                                  .replace(/\b\w/g, l => l.toUpperCase());

                              return `
                                  <div class="feed-card">
                                      <div class="feed-name">${displayName}</div>
                                      <div class="feed-links">
                                          <a href="feeds/${filename}" class="feed-link rss">📡 RSS</a>
                                          <a href="history-explorer.html?feed=${feedName}" class="feed-link">📜 History</a>
                                          <a href="history-explorer.html?feed=${feedName}" class="feed-link">📁 Files</a>
                                      </div>
                                  </div>
                              `;
                          }).join('');

                      } catch (error) {
                          console.error('Error loading feeds:', error);
                          container.innerHTML = `
                              <div class="loading">
                                  <p>Feeds will appear here after the workflow runs.</p>
                                  <p style="margin-top: 10px; font-size: 0.9em;">
                                      If you just set this up, trigger the workflow manually or wait for the schedule.
                                  </p>
                              </div>
                          `;
                      }
                  }

                  loadFeeds();
              </script>
          </body>
          </html>
          EOF
          echo "=== Deploy directory structure ==="
          ls -la deploy/
          echo "=== Content directory ==="
          ls -la deploy/content/ 2>/dev/null || echo "No content directory"
          echo "=== Feeds directory ==="
          ls -la deploy/feeds/ 2>/dev/null || echo "No feeds directory"
          echo "=== Full recursive listing ==="
          find deploy -type f | head -20

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./deploy

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Check deployment status
        run: |
          echo "Deployment completed!"
          echo "Page URL: ${{ steps.deployment.outputs.page_url }}"
          echo "Note: If historical data is not preserved, ensure:"
          echo "1. The gh-pages branch exists and is being used by GitHub Pages"
          echo "2. The workflow has write permissions to the repository"
          echo "3. Check the Actions log for any errors during the history preservation step"
